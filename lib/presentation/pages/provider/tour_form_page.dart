import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../blocs/custom_tour/custom_tour_bloc.dart';
import '../../blocs/custom_tour/custom_tour_event.dart';
import '../../blocs/custom_tour/custom_tour_state.dart';
import '../../blocs/auth/auth_bloc.dart';
import '../../../domain/entities/custom_tour.dart';

class TourFormPage extends StatefulWidget {
  final CustomTour? tour; // null for create, non-null for edit

  const TourFormPage({super.key, this.tour});

  @override
  State<TourFormPage> createState() => _TourFormPageState();
}

class _TourFormPageState extends State<TourFormPage> {
  final _formKey = GlobalKey<FormState>();
  final _tourNameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _maxTouristsController = TextEditingController();
  final _priceController = TextEditingController();
  final _tagsController = TextEditingController();

  DateTime? _startDate;
  DateTime? _endDate;
  String _currency = 'USD';
  String? _selectedTemplateId;
  List<String> _tags = [];
  bool _isLoading = false;

  bool get _isEditing => widget.tour != null;

  @override
  void initState() {
    super.initState();
    if (_isEditing) {
      _populateFormWithTour(widget.tour!);
    }
  }

  void _populateFormWithTour(CustomTour tour) {
    _tourNameController.text = tour.tourName;
    _descriptionController.text = tour.description ?? '';
    _maxTouristsController.text = tour.maxTourists.toString();
    _priceController.text = tour.pricePerPerson.toString();
    _startDate = tour.startDate;
    _endDate = tour.endDate;
    _currency = tour.currency;
    _tags = List.from(tour.tags);
    _tagsController.text = _tags.join(', ');
  }

  @override
  void dispose() {
    _tourNameController.dispose();
    _descriptionController.dispose();
    _maxTouristsController.dispose();
    _priceController.dispose();
    _tagsController.dispose();
    super.dispose();
  }

  void _onSubmit() {
    if (_formKey.currentState?.validate() ?? false) {
      final authState = context.read<AuthBloc>().state;
      if (authState.isAuthenticated && authState.userEntity != null) {
        final tour = CustomTour(
          id: _isEditing ? widget.tour!.id : '',
          providerId: authState.userEntity!.id,
          tourTemplateId: _isEditing ? widget.tour!.tourTemplateId : _selectedTemplateId ?? '',
          tourName: _tourNameController.text.trim(),
          joinCode: _isEditing ? widget.tour!.joinCode : '', // Will be generated by backend
          startDate: _startDate!,
          endDate: _endDate!,
          maxTourists: int.parse(_maxTouristsController.text),
          currentTourists: _isEditing ? widget.tour!.currentTourists : 0,
          pricePerPerson: double.parse(_priceController.text),
          currency: _currency,
          status: _isEditing ? widget.tour!.status : TourStatus.draft,
          tags: _tags,
          description: _descriptionController.text.trim().isEmpty 
              ? null 
              : _descriptionController.text.trim(),
          createdDate: _isEditing ? widget.tour!.createdDate : DateTime.now(),
        );

        if (_isEditing) {
          context.read<CustomTourBloc>().add(UpdateCustomTour(tour));
        } else {
          context.read<CustomTourBloc>().add(CreateCustomTour(tour));
        }
      }
    }
  }

  void _updateTags() {
    final tagsText = _tagsController.text.trim();
    if (tagsText.isNotEmpty) {
      setState(() {
        _tags = tagsText
            .split(',')
            .map((tag) => tag.trim())
            .where((tag) => tag.isNotEmpty)
            .toList();
      });
    } else {
      setState(() {
        _tags = [];
      });
    }
  }

  Future<void> _selectStartDate() async {
    final date = await showDatePicker(
      context: context,
      initialDate: _startDate ?? DateTime.now().add(const Duration(days: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    
    if (date != null) {
      setState(() {
        _startDate = date;
        // If end date is before start date, reset it
        if (_endDate != null && _endDate!.isBefore(date)) {
          _endDate = null;
        }
      });
    }
  }

  Future<void> _selectEndDate() async {
    final firstDate = _startDate ?? DateTime.now().add(const Duration(days: 1));
    final date = await showDatePicker(
      context: context,
      initialDate: _endDate ?? firstDate.add(const Duration(days: 1)),
      firstDate: firstDate,
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    
    if (date != null) {
      setState(() {
        _endDate = date;
      });
    }
  }

  String? _validateTourName(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'Tour name is required';
    }
    if (value.trim().length < 3) {
      return 'Tour name must be at least 3 characters';
    }
    if (value.trim().length > 100) {
      return 'Tour name must be less than 100 characters';
    }
    return null;
  }

  String? _validateMaxTourists(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'Maximum tourists is required';
    }
    final number = int.tryParse(value.trim());
    if (number == null) {
      return 'Please enter a valid number';
    }
    if (number < 1) {
      return 'Must be at least 1 tourist';
    }
    if (number > 1000) {
      return 'Maximum 1000 tourists allowed';
    }
    return null;
  }

  String? _validatePrice(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'Price is required';
    }
    final price = double.tryParse(value.trim());
    if (price == null) {
      return 'Please enter a valid price';
    }
    if (price < 0) {
      return 'Price cannot be negative';
    }
    if (price > 100000) {
      return 'Price seems too high';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditing ? 'Edit Tour' : 'Create Tour'),
        elevation: 0,
      ),
      body: BlocListener<CustomTourBloc, CustomTourState>(
        listener: (context, state) {
          if (state is CustomTourLoading) {
            setState(() => _isLoading = true);
          } else {
            setState(() => _isLoading = false);
          }

          if (state is CustomTourCreated || state is CustomTourUpdated) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text((state as CustomTourOperationSuccess).message),
                backgroundColor: Colors.green,
              ),
            );
            Navigator.of(context).pop();
          }

          if (state is CustomTourError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(state.message),
                backgroundColor: Colors.red,
              ),
            );
          }
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Header
                Card(
                  color: Colors.blue[50],
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        Icon(
                          _isEditing ? Icons.edit : Icons.add_circle,
                          size: 48,
                          color: Colors.blue[700],
                        ),
                        const SizedBox(height: 12),
                        Text(
                          _isEditing ? 'Edit Tour Details' : 'Create New Tour',
                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[700],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // Basic Information
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Basic Information',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),

                        TextFormField(
                          controller: _tourNameController,
                          decoration: const InputDecoration(
                            labelText: 'Tour Name *',
                            hintText: 'e.g., Amazing City Adventure',
                            prefixIcon: Icon(Icons.tour),
                            border: OutlineInputBorder(),
                          ),
                          validator: _validateTourName,
                        ),
                        const SizedBox(height: 16),

                        TextFormField(
                          controller: _descriptionController,
                          decoration: const InputDecoration(
                            labelText: 'Description',
                            hintText: 'Describe your tour...',
                            prefixIcon: Icon(Icons.description),
                            border: OutlineInputBorder(),
                          ),
                          maxLines: 3,
                          maxLength: 500,
                        ),
                        const SizedBox(height: 16),

                        TextFormField(
                          controller: _tagsController,
                          decoration: const InputDecoration(
                            labelText: 'Tags',
                            hintText: 'adventure, nature, city (comma separated)',
                            prefixIcon: Icon(Icons.tag),
                            border: OutlineInputBorder(),
                          ),
                          onChanged: (_) => _updateTags(),
                        ),
                        if (_tags.isNotEmpty) ...[
                          const SizedBox(height: 8),
                          Wrap(
                            spacing: 8,
                            runSpacing: 4,
                            children: _tags.map((tag) => Chip(
                              label: Text(tag),
                              backgroundColor: Colors.blue[100],
                              deleteIcon: const Icon(Icons.close, size: 16),
                              onDeleted: () {
                                setState(() {
                                  _tags.remove(tag);
                                  _tagsController.text = _tags.join(', ');
                                });
                              },
                            )).toList(),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Dates
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Tour Dates',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),

                        Row(
                          children: [
                            Expanded(
                              child: InkWell(
                                onTap: _selectStartDate,
                                child: InputDecorator(
                                  decoration: const InputDecoration(
                                    labelText: 'Start Date *',
                                    prefixIcon: Icon(Icons.calendar_today),
                                    border: OutlineInputBorder(),
                                  ),
                                  child: Text(
                                    _startDate != null
                                        ? _formatDate(_startDate!)
                                        : 'Select start date',
                                    style: TextStyle(
                                      color: _startDate != null
                                          ? Theme.of(context).textTheme.bodyLarge?.color
                                          : Colors.grey[600],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: InkWell(
                                onTap: _startDate != null ? _selectEndDate : null,
                                child: InputDecorator(
                                  decoration: InputDecoration(
                                    labelText: 'End Date *',
                                    prefixIcon: const Icon(Icons.calendar_today),
                                    border: const OutlineInputBorder(),
                                    enabled: _startDate != null,
                                  ),
                                  child: Text(
                                    _endDate != null
                                        ? _formatDate(_endDate!)
                                        : 'Select end date',
                                    style: TextStyle(
                                      color: _endDate != null
                                          ? Theme.of(context).textTheme.bodyLarge?.color
                                          : Colors.grey[600],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        
                        if (_startDate != null && _endDate != null) ...[
                          const SizedBox(height: 12),
                          Container(
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.blue[50],
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(color: Colors.blue[200]!),
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.info, color: Colors.blue[700], size: 20),
                                const SizedBox(width: 8),
                                Text(
                                  'Duration: ${_endDate!.difference(_startDate!).inDays + 1} days',
                                  style: TextStyle(
                                    fontWeight: FontWeight.w600,
                                    color: Colors.blue[700],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Capacity and Pricing
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Capacity & Pricing',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),

                        Row(
                          children: [
                            Expanded(
                              child: TextFormField(
                                controller: _maxTouristsController,
                                decoration: const InputDecoration(
                                  labelText: 'Max Tourists *',
                                  hintText: '20',
                                  prefixIcon: Icon(Icons.people),
                                  border: OutlineInputBorder(),
                                ),
                                keyboardType: TextInputType.number,
                                validator: _validateMaxTourists,
                              ),
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: Row(
                                children: [
                                  Expanded(
                                    flex: 2,
                                    child: DropdownButtonFormField<String>(
                                      initialValue: _currency,
                                      decoration: const InputDecoration(
                                        labelText: 'Currency',
                                        border: OutlineInputBorder(),
                                      ),
                                      items: const [
                                        DropdownMenuItem(value: 'USD', child: Text('USD')),
                                        DropdownMenuItem(value: 'EUR', child: Text('EUR')),
                                        DropdownMenuItem(value: 'GBP', child: Text('GBP')),
                                        DropdownMenuItem(value: 'JPY', child: Text('JPY')),
                                      ],
                                      onChanged: (value) {
                                        if (value != null) {
                                          setState(() => _currency = value);
                                        }
                                      },
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    flex: 3,
                                    child: TextFormField(
                                      controller: _priceController,
                                      decoration: const InputDecoration(
                                        labelText: 'Price *',
                                        hintText: '299.99',
                                        border: OutlineInputBorder(),
                                      ),
                                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                                      validator: _validatePrice,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 32),

                // Submit Button
                SizedBox(
                  height: 50,
                  child: ElevatedButton(
                    onPressed: _isLoading || _startDate == null || _endDate == null 
                        ? null 
                        : _onSubmit,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: _isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          )
                        : Text(
                            _isEditing ? 'Update Tour' : 'Create Tour',
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                  ),
                ),
                const SizedBox(height: 16),

                // Help Text
                Card(
                  color: Colors.grey[50],
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.info_outline, color: Colors.grey[600]),
                            const SizedBox(width: 8),
                            Text(
                              'Important Information',
                              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                                fontWeight: FontWeight.w600,
                                color: Colors.grey[700],
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),
                        Text(
                          '• Tours are created in draft status and need to be published\n'
                          '• A unique join code will be generated automatically\n'
                          '• You can edit tour details until it becomes active\n'
                          '• Price is per person for the entire tour duration',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}