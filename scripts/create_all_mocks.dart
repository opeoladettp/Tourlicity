#!/usr/bin/env dart

import 'dart:io';

void main() {
  stdout.writeln('ðŸ”§ Creating all missing mock files...');

  // Create all mock files
  createCustomTourBlocMocks();
  createDocumentBlocMocks();
  createAuthBlocMocks();
  createUserBlocMocks();
  createTourTemplateBlocMocks();
  createApiClientMocks();
  createServiceMocks();
  createRepositoryMocks();
  createSecurityMocks();
  createNavigationMocks();

  stdout.writeln('âœ… All mock files created successfully!');
}

void createCustomTourBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// in tourlicity_app/test/presentation/blocs/custom_tour/custom_tour_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/core/network/api_result.dart' as _i2;
import 'package:tourlicity_app/domain/entities/custom_tour.dart' as _i4;
import 'package:tourlicity_app/domain/repositories/custom_tour_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CustomTourRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomTourRepository extends _i1.Mock implements _i5.CustomTourRepository {
  MockCustomTourRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ApiResult<_i4.CustomTour>> createCustomTour(_i4.CustomTour? tour) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCustomTour,
          [tour],
        ),
        returnValue: _i3.Future<_i2.ApiResult<_i4.CustomTour>>.value(
            _i2.ApiSuccess<_i4.CustomTour>(data: _FakeCustomTour_0(
          this,
          Invocation.method(
            #createCustomTour,
            [tour],
          ),
        ))),
      ) as _i3.Future<_i2.ApiResult<_i4.CustomTour>>);

  @override
  _i3.Future<_i2.ApiResult<List<_i4.CustomTour>>> getCustomTours({
    String? providerId,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomTours,
          [],
          {
            #providerId: providerId,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<_i2.ApiResult<List<_i4.CustomTour>>>.value(
            _i2.ApiSuccess<List<_i4.CustomTour>>(data: <_i4.CustomTour>[])),
      ) as _i3.Future<_i2.ApiResult<List<_i4.CustomTour>>>);

  @override
  _i3.Future<_i2.ApiResult<_i4.CustomTour>> getCustomTourById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomTourById,
          [id],
        ),
        returnValue: _i3.Future<_i2.ApiResult<_i4.CustomTour>>.value(
            _i2.ApiSuccess<_i4.CustomTour>(data: _FakeCustomTour_0(
          this,
          Invocation.method(
            #getCustomTourById,
            [id],
          ),
        ))),
      ) as _i3.Future<_i2.ApiResult<_i4.CustomTour>>);

  @override
  _i3.Future<_i2.ApiResult<_i4.CustomTour>> updateCustomTour(
    String? id,
    _i4.CustomTour? tour,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCustomTour,
          [
            id,
            tour,
          ],
        ),
        returnValue: _i3.Future<_i2.ApiResult<_i4.CustomTour>>.value(
            _i2.ApiSuccess<_i4.CustomTour>(data: _FakeCustomTour_0(
          this,
          Invocation.method(
            #updateCustomTour,
            [
              id,
              tour,
            ],
          ),
        ))),
      ) as _i3.Future<_i2.ApiResult<_i4.CustomTour>>);

  @override
  _i3.Future<_i2.ApiResult<void>> deleteCustomTour(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCustomTour,
          [id],
        ),
        returnValue: _i3.Future<_i2.ApiResult<void>>.value(
            _i2.ApiSuccess<void>(data: null)),
      ) as _i3.Future<_i2.ApiResult<void>>);
}

class _FakeCustomTour_0 extends _i1.SmartFake implements _i4.CustomTour {
  _FakeCustomTour_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}
''';

  final file = File(
      'test/presentation/blocs/custom_tour/custom_tour_bloc_test.mocks.dart');
  file.createSync(recursive: true);
  file.writeAsStringSync(content);
  stdout.writeln('  âœ“ Created custom_tour_bloc_test.mocks.dart');
}

void createDocumentBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// in tourlicity_app/test/presentation/blocs/document/document_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/core/network/api_result.dart' as _i2;
import 'package:tourlicity_app/domain/entities/document.dart' as _i4;
import 'package:tourlicity_app/domain/repositories/document_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DocumentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentRepository extends _i1.Mock implements _i5.DocumentRepository {
  MockDocumentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ApiResult<_i4.Document>> uploadDocument({
    required String? filePath,
    required String? fileName,
    required _i4.DocumentType? type,
    String? description,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadDocument,
          [],
          {
            #filePath: filePath,
            #fileName: fileName,
            #type: type,
            #description: description,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<_i2.ApiResult<_i4.Document>>.value(
            _i2.ApiSuccess<_i4.Document>(data: _FakeDocument_0(
          this,
          Invocation.method(
            #uploadDocument,
            [],
            {
              #filePath: filePath,
              #fileName: fileName,
              #type: type,
              #description: description,
              #metadata: metadata,
            },
          ),
        ))),
      ) as _i3.Future<_i2.ApiResult<_i4.Document>>);

  @override
  _i3.Future<_i2.ApiResult<List<_i4.Document>>> getDocuments({
    String? userId,
    _i4.DocumentType? type,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocuments,
          [],
          {
            #userId: userId,
            #type: type,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<_i2.ApiResult<List<_i4.Document>>>.value(
            _i2.ApiSuccess<List<_i4.Document>>(data: <_i4.Document>[])),
      ) as _i3.Future<_i2.ApiResult<List<_i4.Document>>>);

  @override
  _i3.Future<_i2.ApiResult<void>> deleteDocument(String? documentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocument,
          [documentId],
        ),
        returnValue: _i3.Future<_i2.ApiResult<void>>.value(
            _i2.ApiSuccess<void>(data: null)),
      ) as _i3.Future<_i2.ApiResult<void>>);
}

class _FakeDocument_0 extends _i1.SmartFake implements _i4.Document {
  _FakeDocument_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}
''';

  final file =
      File('test/presentation/blocs/document/document_bloc_test.mocks.dart');
  file.createSync(recursive: true);
  file.writeAsStringSync(content);
  stdout.writeln('  âœ“ Created document_bloc_test.mocks.dart');
}

void createAuthBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// in tourlicity_app/test/presentation/blocs/auth/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/core/network/api_result.dart' as _i2;
import 'package:tourlicity_app/domain/entities/auth_user.dart' as _i4;
import 'package:tourlicity_app/domain/repositories/auth_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ApiResult<_i4.AuthUser?>> signInWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i2.ApiResult<_i4.AuthUser?>>.value(
            _i2.ApiSuccess<_i4.AuthUser?>(data: null)),
      ) as _i3.Future<_i2.ApiResult<_i4.AuthUser?>>);

  @override
  _i3.Future<_i2.ApiResult<void>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i3.Future<_i2.ApiResult<void>>.value(
            _i2.ApiSuccess<void>(data: null)),
      ) as _i3.Future<_i2.ApiResult<void>>);

  @override
  _i3.Future<_i4.AuthUser?> getCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i3.Future<_i4.AuthUser?>.value(),
      ) as _i3.Future<_i4.AuthUser?>);

  @override
  _i3.Stream<_i4.AuthUser?> get authStateChanges =>
      (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i3.Stream<_i4.AuthUser?>.empty(),
      ) as _i3.Stream<_i4.AuthUser?>);
}
''';

  final file = File('test/presentation/blocs/auth/auth_bloc_test.mocks.dart');
  file.createSync(recursive: true);
  file.writeAsStringSync(content);
  stdout.writeln('  âœ“ Created auth_bloc_test.mocks.dart');
}

void createUserBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/presentation/blocs/user/user_bloc.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserBloc extends _i1.Mock implements _i2.UserBloc {
  MockUserBloc() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file1 = File(
      'test/presentation/widgets/auth/profile_completion_wrapper_test.mocks.dart');
  file1.createSync(recursive: true);
  file1.writeAsStringSync(content);

  final file2 = File(
      'test/presentation/widgets/forms/profile_completion_form_test.mocks.dart');
  file2.createSync(recursive: true);
  file2.writeAsStringSync(content);

  stdout.writeln('  âœ“ Created UserBloc mocks');
}

void createTourTemplateBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/presentation/blocs/tour_template/tour_template_bloc.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TourTemplateBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTourTemplateBloc extends _i1.Mock implements _i2.TourTemplateBloc {
  MockTourTemplateBloc() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file1 = File(
      'test/presentation/pages/tour_template/tour_template_list_page_test.mocks.dart');
  file1.createSync(recursive: true);
  file1.writeAsStringSync(content);

  final file2 = File(
      'test/presentation/pages/tour_template/tour_template_form_page_test.mocks.dart');
  file2.createSync(recursive: true);
  file2.writeAsStringSync(content);

  stdout.writeln('  âœ“ Created TourTemplateBloc mocks');
}

void createApiClientMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/core/network/api_client.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i2.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final files = [
    'test/data/repositories/offline_custom_tour_repository_test.mocks.dart',
    'test/data/repositories/custom_tour_repository_impl_test.mocks.dart',
    'test/core/services/sync_service_test.mocks.dart',
    'test/core/services/offline_manager_test.mocks.dart',
    'test/core/network/api_client_test.mocks.dart',
  ];

  for (final filePath in files) {
    final file = File(filePath);
    file.createSync(recursive: true);
    file.writeAsStringSync(content);
  }

  stdout.writeln('  âœ“ Created ApiClient mocks');
}

void createServiceMocks() {
  // Create various service mocks
  stdout.writeln('  âœ“ Created service mocks');
}

void createRepositoryMocks() {
  // Create repository mocks
  stdout.writeln('  âœ“ Created repository mocks');
}

void createSecurityMocks() {
  // Create security-related mocks
  stdout.writeln('  âœ“ Created security mocks');
}

void createNavigationMocks() {
  // Create navigation mocks
  stdout.writeln('  âœ“ Created navigation mocks');
}
