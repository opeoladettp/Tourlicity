#!/usr/bin/env dart

import 'dart:io';

void main() {
  stdout.writeln('ðŸ”§ Creating remaining mock files...');

  createDocumentBlocMocks();
  createFilePickerServiceMocks();
  createSecurityMocks();
  createConnectivityServiceMocks();
  createCacheServiceMocks();
  createSyncServiceMocks();
  createTokenStorageMocks();
  createDioMocks();
  createNavigationMocks();

  stdout.writeln('âœ… All remaining mock files created successfully!');
}

void createDocumentBlocMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/presentation/blocs/document/document_bloc.dart' as _i2;
import 'package:tourlicity_app/core/services/file_picker_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DocumentBloc].
class MockDocumentBloc extends _i1.Mock implements _i2.DocumentBloc {
  MockDocumentBloc() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [FilePickerService].
class MockFilePickerService extends _i1.Mock implements _i3.FilePickerService {
  MockFilePickerService() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file = File(
      'test/presentation/widgets/document/document_upload_widget_test.mocks.dart');
  file.createSync(recursive: true);
  file.writeAsStringSync(content);
  stdout.writeln('  âœ“ Created document_upload_widget_test.mocks.dart');
}

void createFilePickerServiceMocks() {
  // Already created in createDocumentBlocMocks
  stdout.writeln('  âœ“ FilePickerService mocks already created');
}

void createSecurityMocks() {
  const flutterSecureStorageContent = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlutterSecureStorage].
class MockFlutterSecureStorage extends _i1.Mock implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  const localAuthContent = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:local_auth/local_auth.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalAuthentication].
class MockLocalAuthentication extends _i1.Mock implements _i2.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file1 =
      File('test/core/security/secure_session_manager_test.mocks.dart');
  file1.createSync(recursive: true);
  file1.writeAsStringSync(flutterSecureStorageContent);

  final file2 =
      File('test/core/security/biometric_auth_service_test.mocks.dart');
  file2.createSync(recursive: true);
  file2.writeAsStringSync(localAuthContent);

  stdout.writeln('  âœ“ Created security mocks');
}

void createConnectivityServiceMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/core/services/connectivity_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectivityService].
class MockConnectivityService extends _i1.Mock implements _i2.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final files = [
    'test/data/repositories/offline_custom_tour_repository_test.mocks.dart',
    'test/core/services/sync_service_test.mocks.dart',
  ];

  for (final filePath in files) {
    final file = File(filePath);
    if (file.existsSync()) {
      String existingContent = file.readAsStringSync();
      if (!existingContent.contains('MockConnectivityService')) {
        existingContent += '\n\n$content';
        file.writeAsStringSync(existingContent);
      }
    }
  }

  stdout.writeln('  âœ“ Created ConnectivityService mocks');
}

void createCacheServiceMocks() {
  const content = '''
/// A class which mocks [CacheService].
class MockCacheService extends _i1.Mock implements CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file = File(
      'test/data/repositories/offline_custom_tour_repository_test.mocks.dart');
  if (file.existsSync()) {
    String existingContent = file.readAsStringSync();
    if (!existingContent.contains('MockCacheService')) {
      existingContent += '\n\n$content';
      file.writeAsStringSync(existingContent);
    }
  }

  stdout.writeln('  âœ“ Created CacheService mocks');
}

void createSyncServiceMocks() {
  const content = '''
/// A class which mocks [SyncService].
class MockSyncService extends _i1.Mock implements SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file = File(
      'test/data/repositories/offline_custom_tour_repository_test.mocks.dart');
  if (file.existsSync()) {
    String existingContent = file.readAsStringSync();
    if (!existingContent.contains('MockSyncService')) {
      existingContent += '\n\n$content';
      file.writeAsStringSync(existingContent);
    }
  }

  stdout.writeln('  âœ“ Created SyncService mocks');
}

void createTokenStorageMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:dio/dio.dart' as _i2;
import 'package:tourlicity_app/core/storage/token_storage.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Dio].
class MockDio extends _i1.Mock implements _i2.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TokenStorage].
class MockTokenStorage extends _i1.Mock implements _i3.TokenStorage {
  MockTokenStorage() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final file = File('test/core/network/api_client_test.mocks.dart');
  file.createSync(recursive: true);
  file.writeAsStringSync(content);
  stdout.writeln('  âœ“ Created TokenStorage and Dio mocks');
}

void createDioMocks() {
  // Already created in createTokenStorageMocks
  stdout.writeln('  âœ“ Dio mocks already created');
}

void createNavigationMocks() {
  const content = '''
// Mocks generated by Mockito 5.4.4 from annotations
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/presentation/blocs/auth/auth_bloc.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthBloc].
class MockAuthBloc extends _i1.Mock implements _i2.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }
}
''';

  final files = [
    'test/core/navigation/app_router_test.mocks.dart',
    'test/presentation/pages/dashboard/role_based_dashboard_test.mocks.dart',
  ];

  for (final filePath in files) {
    final file = File(filePath);
    file.createSync(recursive: true);
    file.writeAsStringSync(content);
  }

  stdout.writeln('  âœ“ Created navigation mocks');
}
