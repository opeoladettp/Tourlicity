// Mocks generated by Mockito 5.4.6 from annotations
// in tourlicity_app/test/data/repositories/offline_custom_tour_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:tourlicity_app/core/network/api_client.dart' as _i2;
import 'package:tourlicity_app/core/network/api_result.dart' as _i4;
import 'package:tourlicity_app/core/services/cache_service.dart' as _i6;
import 'package:tourlicity_app/core/services/connectivity_service.dart' as _i7;
import 'package:tourlicity_app/core/services/sync_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i2.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ApiResult<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);

  @override
  _i3.Future<_i4.ApiResult<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);

  @override
  _i3.Future<_i4.ApiResult<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);

  @override
  _i3.Future<_i4.ApiResult<T>> delete<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);

  @override
  _i3.Future<_i4.ApiResult<T>> patch<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);

  @override
  _i3.Future<_i4.ApiResult<T>> uploadFile<T>(
    String? path,
    String? filePath, {
    String? fieldName = 'file',
    Map<String, String>? fields,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            path,
            filePath,
          ],
          {
            #fieldName: fieldName,
            #fields: fields,
            #headers: headers,
          },
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<T>>.value(_i5.dummyValue<_i4.ApiResult<T>>(
          this,
          Invocation.method(
            #uploadFile,
            [
              path,
              filePath,
            ],
            {
              #fieldName: fieldName,
              #fields: fields,
              #headers: headers,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<T>>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i6.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheData({
    required String? table,
    required String? key,
    required Map<String, dynamic>? data,
    int? customDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheData,
          [],
          {
            #table: table,
            #key: key,
            #data: data,
            #customDuration: customDuration,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> getCachedData({
    required String? table,
    required String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedData,
          [],
          {
            #table: table,
            #key: key,
          },
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedList(
          {required String? table}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedList,
          [],
          {#table: table},
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> removeCachedData({
    required String? table,
    required String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCachedData,
          [],
          {
            #table: table,
            #key: key,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isCached({
    required String? table,
    required String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCached,
          [],
          {
            #table: table,
            #key: key,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> cacheTours(List<Map<String, dynamic>>? tours) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTours,
          [tours],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedTours() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedTours,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cacheRegistrations(
          List<Map<String, dynamic>>? registrations) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRegistrations,
          [registrations],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedRegistrations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedRegistrations,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cacheDocuments(List<Map<String, dynamic>>? documents) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheDocuments,
          [documents],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedDocuments() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedDocuments,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cacheMessages(List<Map<String, dynamic>>? messages) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMessages,
          [messages],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedMessages() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedMessages,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cacheProviders(List<Map<String, dynamic>>? providers) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProviders,
          [providers],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedProviders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedProviders,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cacheTourTemplates(List<Map<String, dynamic>>? templates) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTourTemplates,
          [templates],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getCachedTourTemplates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedTourTemplates,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> clearAllCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAllCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearExpiredCache() => (super.noSuchMethod(
        Invocation.method(
          #clearExpiredCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i7.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  _i3.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> hasInternetConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasInternetConnection,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i8.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize(_i2.ApiClient? apiClient) => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [apiClient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> addToSyncQueue({
    required String? endpoint,
    required String? method,
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToSyncQueue,
          [],
          {
            #endpoint: endpoint,
            #method: method,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getPendingSyncCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncCount,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> clearSyncQueue() => (super.noSuchMethod(
        Invocation.method(
          #clearSyncQueue,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> forcSync() => (super.noSuchMethod(
        Invocation.method(
          #forcSync,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
