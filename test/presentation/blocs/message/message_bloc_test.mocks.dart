// Mocks generated by Mockito 5.4.6 from annotations
// in tourlicity_app/test/presentation/blocs/message/message_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourlicity_app/domain/entities/message.dart' as _i2;
import 'package:tourlicity_app/domain/repositories/message_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMessage_0 extends _i1.SmartFake implements _i2.Message {
  _FakeMessage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRepository extends _i1.Mock implements _i3.MessageRepository {
  MockMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Message> sendBroadcastMessage({
    required String? tourId,
    required String? title,
    required String? content,
    required _i2.MessageType? type,
    required _i2.MessagePriority? priority,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBroadcastMessage,
          [],
          {
            #tourId: tourId,
            #title: title,
            #content: content,
            #type: type,
            #priority: priority,
            #metadata: metadata,
          },
        ),
        returnValue: _i4.Future<_i2.Message>.value(_FakeMessage_0(
          this,
          Invocation.method(
            #sendBroadcastMessage,
            [],
            {
              #tourId: tourId,
              #title: title,
              #content: content,
              #type: type,
              #priority: priority,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i4.Future<_i2.Message>);

  @override
  _i4.Future<_i2.Message> sendTourUpdate({
    required String? tourId,
    required String? title,
    required String? content,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTourUpdate,
          [],
          {
            #tourId: tourId,
            #title: title,
            #content: content,
            #metadata: metadata,
          },
        ),
        returnValue: _i4.Future<_i2.Message>.value(_FakeMessage_0(
          this,
          Invocation.method(
            #sendTourUpdate,
            [],
            {
              #tourId: tourId,
              #title: title,
              #content: content,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i4.Future<_i2.Message>);

  @override
  _i4.Future<List<_i2.Message>> getMessagesForTour(String? tourId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesForTour,
          [tourId],
        ),
        returnValue: _i4.Future<List<_i2.Message>>.value(<_i2.Message>[]),
      ) as _i4.Future<List<_i2.Message>>);

  @override
  _i4.Future<List<_i2.Message>> getMessagesForUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesForUser,
          [userId],
        ),
        returnValue: _i4.Future<List<_i2.Message>>.value(<_i2.Message>[]),
      ) as _i4.Future<List<_i2.Message>>);

  @override
  _i4.Future<List<_i2.Message>> getUnreadMessages(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnreadMessages,
          [userId],
        ),
        returnValue: _i4.Future<List<_i2.Message>>.value(<_i2.Message>[]),
      ) as _i4.Future<List<_i2.Message>>);

  @override
  _i4.Future<void> markMessageAsRead(
    String? messageId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [
            messageId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markMessageAsDismissed(
    String? messageId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsDismissed,
          [
            messageId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markMultipleMessagesAsRead(
    List<String>? messageIds,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMultipleMessagesAsRead,
          [
            messageIds,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Message> getMessageById(String? messageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessageById,
          [messageId],
        ),
        returnValue: _i4.Future<_i2.Message>.value(_FakeMessage_0(
          this,
          Invocation.method(
            #getMessageById,
            [messageId],
          ),
        )),
      ) as _i4.Future<_i2.Message>);

  @override
  _i4.Future<void> deleteMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [messageId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Message> updateMessage({
    required String? messageId,
    String? title,
    String? content,
    _i2.MessagePriority? priority,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMessage,
          [],
          {
            #messageId: messageId,
            #title: title,
            #content: content,
            #priority: priority,
            #metadata: metadata,
          },
        ),
        returnValue: _i4.Future<_i2.Message>.value(_FakeMessage_0(
          this,
          Invocation.method(
            #updateMessage,
            [],
            {
              #messageId: messageId,
              #title: title,
              #content: content,
              #priority: priority,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i4.Future<_i2.Message>);

  @override
  _i4.Future<Map<String, dynamic>> getMessageStatistics(String? tourId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessageStatistics,
          [tourId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<_i2.Message>> searchMessages({
    required String? query,
    String? tourId,
    _i2.MessageType? type,
    _i2.MessagePriority? priority,
    DateTime? fromDate,
    DateTime? toDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMessages,
          [],
          {
            #query: query,
            #tourId: tourId,
            #type: type,
            #priority: priority,
            #fromDate: fromDate,
            #toDate: toDate,
          },
        ),
        returnValue: _i4.Future<List<_i2.Message>>.value(<_i2.Message>[]),
      ) as _i4.Future<List<_i2.Message>>);
}
